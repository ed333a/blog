<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>InteliJIDEA 配置 Minecraft 插件开发实时调试环境, 并进行断点调试</title>
      <link href="/blog/20240812100512/"/>
      <url>/blog/20240812100512/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>我在开发 MC 服务器插件的时候, 常常因为需要在开发界面和命令行窗口之间来回切换而感到烦恼, 截止到本篇文章成文之前, 我认识的插件开发者基本都是先把插件构建好, 然后将构建产物<strong>手动复制到服务端插件目录</strong>进行调试, 这样的效率实在是过于低下. 于是我就思考有没有一种方式能够只在 IDEA 内就完成下面这些步骤: </p><ol><li>插件的构建</li><li>复制构建产物到服务端插件目录中</li><li>运行调试服务器</li><li>进行实时的断点调试</li></ol><p>于是我就开启了漫长的网络搜索过程, 终于找到了一篇<a href="https://blog.csdn.net/qq_41042178/article/details/123175466">比较不错的文章</a>满足了我的需求, 因此本文的内容只是基于这篇文章的学习记录</p><h3 id="开发环境的搭建"><a href="#开发环境的搭建" class="headerlink" title="开发环境的搭建"></a>开发环境的搭建</h3><p>如果已经配置好了开发环境, 可以跳过这段内容.<br>开发环境采用 IDEA 捆绑的 Gradle 环境, Java 为 JDK17, 使用的服务端 API 为 SpigotAPI, 基本代码如下:</p><pre class="language-groovy" data-language="groovy"><code class="language-groovy"><span class="token comment">//...</span>repositories <span class="token punctuation">{</span>    maven <span class="token punctuation">{</span>        name <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"spigotmc-repo"</span></span>        url <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"https://hub.spigotmc.org/nexus/content/repositories/snapshots/"</span></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>dependencies <span class="token punctuation">{</span>    compileOnly <span class="token interpolation-string"><span class="token string">"org.spigotmc:spigot-api:1.20.4-R0.1-SNAPSHOT"</span></span><span class="token punctuation">}</span><span class="token comment">//...</span></code></pre><h3 id="插件的构建"><a href="#插件的构建" class="headerlink" title="插件的构建"></a>插件的构建</h3><p>如果你的插件没有依赖任何外部库, 直接使用 Gradle 项目自带的任务 jar 即可完成构建</p><img src="/blog/20240812100512/1.png" class="" title="直接构建 jar"><p>如果你的插件依赖了外部库, 则需要使用 <code>shadowJar</code> 的 Gradle 插件来打包外部库, 在 <code>build.gradle</code> 文件中添加以下代码:</p><pre class="language-groovy" data-language="groovy"><code class="language-groovy"><span class="token comment">//...</span>plugins <span class="token punctuation">{</span>    <span class="token comment">//...</span>    id <span class="token interpolation-string"><span class="token string">"com.github.johnrengelman.shadow"</span></span> version <span class="token interpolation-string"><span class="token string">"7.1.2"</span></span>    <span class="token comment">//...</span><span class="token punctuation">}</span><span class="token comment">//...</span></code></pre><p>然后重载一下 Gradle 项目, 这时候就会出现 <code>shadowJar</code> 任务了</p><img src="/blog/20240812100512/2.png" class="" title="shadowJar 插件配置"><p>需要注意的是, 不对依赖项进行包位置重定向的话, 直接使用 shadowJar 任务, 会直接把依赖库打包到与插件包名同级的位置, 以下是我的插件对依赖库进行重定向之后的效果</p><img src="/blog/20240812100512/3.png" class="" title="包位置重定向"><p>进行包位置重定向也很简单, 只需要在 <code>build.gradle</code> 中配置如下代码, 第一个参数是你需要重定向的包, 第二个参数指向你重定向的位置</p><pre class="language-groovy" data-language="groovy"><code class="language-groovy">shadowJar <span class="token punctuation">{</span>    <span class="token function">relocate</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"org.a.b.c"</span></span><span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">"to.your.destination"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>除此之外, <code>shadowJar</code> 的 <code>minimize()</code> 方法还可以将依赖库中没有用到的类进行去除, 缩小构建产物体积. 最终构建好的产物会位于 <code>build/libs</code> 文件夹内</p><h3 id="配置调试用的-MC-服务器"><a href="#配置调试用的-MC-服务器" class="headerlink" title="配置调试用的 MC 服务器"></a>配置调试用的 MC 服务器</h3><p>为了方便(主要还是我太懒了, 不想再重新配置一个服务端了), 我这边直接换到我之前的一个项目了, 服务端的位置放置没啥要求, 你自己记得就行, 我这边为了方便就直接放到项目目录内了. 服务端内的文件没什么特别的东西, 就是正常的服务端就行.</p><img src="/blog/20240812100512/4.png" class="" title="服务端内文件截图"><h3 id="为-gradle-项目添加一个复制任务"><a href="#为-gradle-项目添加一个复制任务" class="headerlink" title="为 gradle 项目添加一个复制任务"></a>为 gradle 项目添加一个复制任务</h3><p>服务端配置好了以后, 我们还需要在 gradle 项目中添加一个复制构建产物到服务端目录的任务, 代码如下 </p><pre class="language-groovy" data-language="groovy"><code class="language-groovy">tasks<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'copy'</span><span class="token punctuation">,</span> Copy<span class="token punctuation">)</span> <span class="token punctuation">{</span>    from <span class="token interpolation-string"><span class="token string">"build/libs"</span></span>  <span class="token comment">// 源文件夹, 在这里是构建产物的文件夹 </span>    into <span class="token string">'server/paper-1.20.4/plugins'</span>         <span class="token comment">// 目标文件夹, 在这里是调试服务端的插件文件夹</span>    include <span class="token interpolation-string"><span class="token string">"YourArtifactName-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token expression">version</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.jar"</span></span>  <span class="token comment">// 可选：只复制特定类型的文件,支持正则表达式 在这里只规定该名称的文件可以被复制到目标文件夹</span><span class="token punctuation">}</span></code></pre><p>配置好后重新加载 gradle 项目, 看看右侧任务列表中是否有 <code>copy</code> 任务, 存在即为配置成功.</p><img src="/blog/20240812100512/5.png" class="" title="copy 任务"><h3 id="在-IDEA-中配置调试任务"><a href="#在-IDEA-中配置调试任务" class="headerlink" title="在 IDEA 中配置调试任务"></a>在 IDEA 中配置调试任务</h3><p>在 <code>Run &gt;&gt; Edit Configurations</code> 中:</p><img src="/blog/20240812100512/6.png" class="" title="配置调试任务"><p>该界面往下拉会有一个 <code>Before Launch</code> 列表， 表示在执行该任务时会先执行列表中的任务, 执行顺序为自上而下， 将我们之前所提及到的构建插件、复制插件任务添加到这里, 之后直接执行该任务就可以实现插件的构建、复制、运行服务端进行调试了</p><img src="/blog/20240812100512/7.png" class="" title="Before Launch"><h3 id="运行、运行以及调试"><a href="#运行、运行以及调试" class="headerlink" title="运行、运行以及调试"></a>运行、运行以及调试</h3><img src="/blog/20240812100512/8.png" class="" title="按钮介绍"><p>我们来在 <code>onEnable()</code> 方法内写一个测试用的程序, 然后点击 “运行以及调试” 按钮来进行断点调试</p><img src="/blog/20240812100512/9.png" class="" title="断点示例程序"><p>调试后可以看到我们的程序成功在断点位置停了下来</p><img src="/blog/20240812100512/10.png" class="" title="断点">]]></content>
      
      
      
        <tags>
            
            <tag> Minecraft, Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
